// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A or C Instruction
    Mux(a=true, b=instruction[5], sel=instruction[15], out=aLoad);

    // Instruction Handling
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=instructionMuxOut);
    ARegister(in=instructionMuxOut, load=aLoad, out=aRegisterOut, out[0..14]=addressM);

    // // ALU Operation
    Mux(a=false, b=instruction[4], sel=instruction[15], out=dLoad);
    DRegister(in=aluOut, load=dLoad, out=dRegisterOut);
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aluMuxOut);
    ALU(x=dRegisterOut, y=aluMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=aluZr, ng=aluNg);

    // Wire instruction[3] to writeM
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

    // Jump bits
    Not(in=aluNg, out=aluPosTemp);
    Mux(a=aluPosTemp, b=false, sel=aluZr, out=aluPos);
    And(a=instruction[0], b=aluPos, out=posOut);
    And(a=instruction[1], b=aluZr, out=zrOut);
    And(a=instruction[2], b=aluNg, out=ngOut);

    Or(a=posOut, b=zrOut, out=jumpTemp);
    Or(a=jumpTemp, b=ngOut, out=jumpOut);

    // Load bits
    And(a=instruction[0], b=instruction[1], out=loadTemp);
    And(a=loadTemp, b=instruction[2], out=loadAndOut);
    Mux(a=false, b=loadAndOut, sel=instruction[15], out=loadOut);

    Mux(a=jumpOut, b=loadOut, sel=loadOut, out=loadJumpOut);
    Mux(a=false, b=loadJumpOut, sel=instruction[15], out=loadJumpInstructionOut);

    // Inc bits
    Or(a=instruction[0], b=instruction[1], out=incOrTemp);
    Or(a=incOrTemp, b=instruction[2], out=incOrOut);
    Not(in=incOrOut, out=notIncOrOut);
    Mux(a=true, b=notIncOrOut, sel=instruction[15], out=incOut);
    Mux(a=true, b=incOut, sel=jumpOut, out=incOutFinal);

    // // Control
    PC(in=aRegisterOut, load=loadJumpInstructionOut, inc=incOutFinal, reset=reset, out[0..14]=pc);
}